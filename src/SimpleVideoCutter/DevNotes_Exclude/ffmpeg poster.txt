To create a poster of a video with 8 images from different parts of the entire video using FFmpeg in a C# application, you can use the following approach:

1. Install FFmpeg: Download the FFmpeg executable and add its location to your system's PATH.

2. Create a WinForms or WPF application.

3. Add a reference to FFmpeg.

4. Use FFmpeg to extract frames from the video at specific timestamps and save them as images.

5. Display or use the generated images as a poster.

Here's an example code:

```csharp
using System;
using System.Diagnostics;
using System.IO;
using System.Windows.Forms;

namespace VideoPosterApp
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
        }

        private void CreatePosterButton_Click(object sender, EventArgs e)
        {
            string inputVideoPath = "input.mp4"; // Replace with your input video file
            string outputFolderPath = "output_images"; // Folder to store the generated images

            if (!Directory.Exists(outputFolderPath))
            {
                Directory.CreateDirectory(outputFolderPath);
            }

            // Define the timestamps for the 8 images (adjust these as needed)
            double[] timestamps = { 10, 20, 30, 40, 50, 60, 70, 80 }; // in seconds

            for (int i = 0; i < 8; i++)
            {
                string outputImagePath = Path.Combine(outputFolderPath, $"frame_{i + 1}.jpg");

                // Use FFmpeg to extract frames at specified timestamps
                string ffmpegCommand = $"-i \"{inputVideoPath}\" -ss {timestamps[i]} -vframes 1 \"{outputImagePath}\"";

                using (Process ffmpegProcess = new Process())
                {
                    ffmpegProcess.StartInfo.FileName = "ffmpeg"; // Replace with the path to your FFmpeg executable
                    ffmpegProcess.StartInfo.Arguments = ffmpegCommand;
                    ffmpegProcess.StartInfo.UseShellExecute = false;
                    ffmpegProcess.StartInfo.RedirectStandardOutput = true;
                    ffmpegProcess.StartInfo.CreateNoWindow = true;

                    ffmpegProcess.Start();
                    ffmpegProcess.WaitForExit();
                }
            }

            // Display or use the generated images as a poster
            // For example, you can load and display these images in a PictureBox control
            // or use them as a poster for your video.
        }
    }
}
```

In this code:

- Replace `"input.mp4"` with the path to your input video file.
- Set `"output_images"` as the folder where the generated images will be stored. If the folder doesn't exist, it will be created.
- Adjust the `timestamps` array to specify the time positions (in seconds) for the 8 images you want to extract from the video.

This code uses FFmpeg to extract frames from the video at the specified timestamps and saves them as JPEG images in the specified output folder. You can then display or use these images as a poster in your application.